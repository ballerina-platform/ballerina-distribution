/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: "java"
apply plugin: "com.github.spotbugs"
apply plugin: "checkstyle"
apply plugin: "jacoco"

repositories {
    mavenLocal()
    maven {
        url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
    }

    maven {
        url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
    }

    maven {
        url = 'https://repo.maven.apache.org/maven2'
    }
}

configurations {
    jacocoRuntime
}

dependencies {
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    testImplementation "org.slf4j:slf4j-api:${slf4jVersion}"

    constraints {
        implementation "com.fasterxml.jackson.core:jackson-databind:2.15.3"
        implementation "com.github.jknack:handlebars:4.2.0"
        implementation "com.google.code.findbugs:jsr305:3.0.2"
        implementation "info.picocli:picocli:4.0.1"
        implementation "io.swagger.core.v3:swagger-core:2.1.6"
        implementation "io.swagger.core.v3:swagger-models:2.1.6"
        implementation "io.swagger.parser.v3:swagger-parser-v2-converter:2.0.24"
        implementation "io.swagger.parser.v3:swagger-parser:2.0.24"
        implementation "javax.ws.rs:javax.ws.rs-api:2.1.1"
        implementation "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
        implementation "org.ballerinalang:ballerina-parser:${ballerinaLangVersion}"
        implementation "org.ballerinalang:ballerina-cli:${ballerinaLangVersion}"
        implementation "org.ballerinalang:formatter-core:${ballerinaLangVersion}"
        implementation "org.ballerinalang:ballerina-tools-api:${ballerinaLangVersion}"
        implementation "io.ballerina.stdlib:http-native:${stdlibHttpVersion}"
        testImplementation "org.testng:testng:${testngVersion}"
    }

    jacocoRuntime "org.jacoco:org.jacoco.agent:${jacoco.toolVersion}:runtime"
    checkstyle "com.puppycrawl.tools:checkstyle:${puppycrawlCheckstyleVersion}"
}

sourceCompatibility = JavaVersion.VERSION_17

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jacoco {
    toolVersion = "0.8.10"
}

test {
    systemProperty "ballerina.home", "$buildDir"
    systemProperty "org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog"
    testLogging {
        showStackTraces = true
        showStandardStreams = true
        events "failed"
        exceptionFormat "full"
    }
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/coverage-reports/jacoco.exec")
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
    }
}

checkstyle {
    toolVersion '10.12.1'
    configFile rootProject.file("config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile": rootProject.file("config/checkstyle/build/suppressions.xml")]
    checkstyleTest.enabled = true
    checkstyleMain.enabled = false
}

spotbugsMain {
    spotbugsMain.enabled = false
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    reportsDir = file("$project.buildDir/reports/spotbugs")
    def excludeFile = file("spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        it.excludeFilter = excludeFile
    }
    reports {
        text.enabled = false
    }
}

spotbugsTest {
    it.enabled = false
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

checkstyleMain.dependsOn(":config:checkstyle:downloadMultipleFiles")
checkstyleTest.dependsOn(":config:checkstyle:downloadMultipleFiles")
