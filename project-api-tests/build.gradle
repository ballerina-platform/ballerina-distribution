 /*
  ~ * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~ *
  ~ * Licensed under the Apache License, Version 2.0 (the "License");
  ~ * you may not use this file except in compliance with the License.
  ~ * You may obtain a copy of the License at
  ~ *
  ~ * http://www.apache.org/licenses/LICENSE-2.0
  ~ *
  ~ * Unless required by applicable law or agreed to in writing, software
  ~ * distributed under the License is distributed on an "AS IS" BASIS,
  ~ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ * See the License for the specific language governing permissions and
  ~ * limitations under the License.
  ~ */

apply from: "$rootDir/gradle/javaProject.gradle"

description = 'Ballerina - Central Tests'

configurations {
    jBallerinaDistribution
    ballerinaDistribution
    ballerinaLinuxDistribution
    ballerinaMacDistribution
    ballerinaWindowsDistribution
}

dependencies {
    testImplementation "org.testng:testng:${testngVersion}"
    testImplementation "net.lingala.zip4j:zip4j:${netLingalaZip4jVersion}"
    testImplementation "commons-io:commons-io:${commonsIoVersion}"
    testImplementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    testImplementation "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
    testImplementation "org.ballerinalang:jballerina-debugger-integration-test:${ballerinaLangVersion}"
    testImplementation "org.ballerinalang:ballerina-test-utils:${ballerinaLangVersion}"
    testImplementation "org.eclipse.lsp4j:org.eclipse.lsp4j.debug:${lsp4jDebugVersion}"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:2.15.3"
    testImplementation "com.squareup.okhttp3:okhttp:3.14.0"

    jBallerinaDistribution project(path: ":ballerina", configuration: "jBallerinaDistribution")
    ballerinaDistribution project(path: ":ballerina", configuration: "ballerinaDistribution")
    ballerinaLinuxDistribution project(path: ":ballerina", configuration: "ballerinaLinuxDistribution")
    ballerinaMacDistribution project(path: ":ballerina", configuration: "ballerinaMacDistribution")
    ballerinaWindowsDistribution project(path: ":ballerina", configuration: "ballerinaWindowsDistribution")
}

task centralTests {
    dependsOn configurations.jBallerinaDistribution
    dependsOn configurations.ballerinaDistribution
    dependsOn configurations.ballerinaLinuxDistribution
    dependsOn configurations.ballerinaWindowsDistribution
    test {
        systemProperty "distributions.dir", "$buildDir/../../ballerina/build/distributions"
        systemProperty "target.dir", "$buildDir"
        systemProperty "maven.version", "$version"
        systemProperty "examples.dir", "$buildDir/../../examples"
        systemProperty "line.check.extensions", ".java, .bal"
        systemProperty "short.version", "$version".split("-")[0]
        systemProperty "server.zip", "$buildDir/../../ballerina/build/distributions/ballerina-${System.getProperty("short.version")}.zip"
        systemProperty "code.name", "${codeName}"

        useTestNG() {
            suites 'src/test/resources/testng.xml'
        }
        testLogging {
            showStandardStreams = true
        }
    }
}


 task checkURL {
     doLast {
         try {
             URL url = new URL("${devIdpUrl}")
             HttpURLConnection connection = (HttpURLConnection) url.openConnection()
             connection.setRequestMethod("GET")
             connection.connect()

             int code = connection.getResponseCode()
             if (code == 200) {
                 logger.lifecycle("Connection to ${devIdpUrl} is successful. Running tests...")
                 ext.isURLAvailable = true
             } else {
                 logger.lifecycle("Connection to ${devIdpUrl} is not successful. Skipping tests...")
                 logger.lifecycle("-----------------------------------------")
                 logger.lifecycle(" WARNING: Skipping the project api tests")
                 logger.lifecycle("-----------------------------------------")
                 ext.isURLAvailable = false
             }
         } catch(Exception ex) {
             logger.lifecycle("Connection to ${devIdpUrl} is not successful. Exception while connecting to " +
                     "${devIdpUrl}. Skipping tests...")
             logger.lifecycle("-----------------------------------------")
             logger.lifecycle(" WARNING: Skipping the project api tests")
             logger.lifecycle("-----------------------------------------")
             ext.isURLAvailable = false
         }
     }
 }

 test {
     dependsOn checkURL
     onlyIf {
         checkURL.isURLAvailable
     }
     dependsOn centralTests
 }
