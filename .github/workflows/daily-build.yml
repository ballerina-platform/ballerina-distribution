name: Daily build

on:
  workflow_dispatch:
  schedule:
    - cron:  '0 2 * * *'    # 07:30 in LK time (GMT+5:30)

jobs:
  ubuntu-build:

    runs-on: ubuntu-latest
    if: github.repository_owner == 'ballerina-platform'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21.0.3'
      - name: Get daily docker version
        id: version
        run: echo "::set-output name=version::$(date +'%Y-%m-%d')"
      - name: Get project version
        id: project-version
        run: |
          SHORT_VERSION=$((grep -w "version" | cut -d= -f2 | cut -d- -f1 | xargs) < gradle.properties)
          DIST_VERSION=$((grep -w "version" | cut -d= -f2 | xargs) < gradle.properties)
          LANG_VERSION=$((grep -w "ballerinaLangVersion" | cut -d= -f2 | cut -d- -f1 | xargs) < gradle.properties)
          CODE_NAME=$((grep -w 'codeName' | cut -d= -f2) < gradle.properties)
          RELEASE_VERSION=$DIST_VERSION-$CODE_NAME
          echo "::set-output name=version::$RELEASE_VERSION"
          echo "::set-output name=sversion::$SHORT_VERSION"
          echo "::set-output name=langversion::$LANG_VERSION"
      - name: Build with Gradle
        env:
          packageUser: ${{ github.actor }}
          packagePAT: ${{ secrets.GITHUB_TOKEN }}
          devCentralToken: ${{ secrets.BALLERINA_CENTRAL_DEV_ACCESS_TOKEN }}
          githubAccessToken: ${{ secrets.GITHUB_TOKEN }}
          ballerinaBotWorkflow: $ {{ secrets.BALLERINA_BOT_WORKFLOW }}
          TEST_MODE_ACTIVE: true
        run: ./gradlew clean build --stacktrace --scan --console=plain --no-daemon --continue -x test
      - name: Create linux-deb
        id: run_installers_deb
        run: |
          cd installers/linux-deb
          ./build-ballerina-linux-deb-x64.sh -v ${{ steps.project-version.outputs.version }} -p ./../../ballerina/build/distributions
          echo "Created linux-deb successfully"
      - name: Create linux-rpm
        id: run_installers_rpm
        run: |
          cd installers/linux-rpm
          ./build-ballerina-linux-rpm-x64.sh -v ${{ steps.project-version.outputs.version }} -p ./../../ballerina/build/distributions
          echo "Created linux-rpm successfully"
      - name: Generate Hashes
        run: |
          openssl dgst -sha256 -out ballerina-${{ steps.project-version.outputs.version }}-linux-x64.deb.sha256 installers/linux-deb/target/ballerina-*-linux-x64.deb
          openssl dgst -sha256 -out ballerina-${{ steps.project-version.outputs.version }}-linux-x64.rpm.sha256 installers/linux-rpm/rpmbuild/RPMS/x86_64/ballerina-*-linux-x64.rpm
          openssl dgst -sha256 -out ballerina-${{ steps.project-version.outputs.version }}.zip.sha256 ballerina/build/distributions/ballerina-${{ steps.project-version.outputs.version }}.zip
          openssl dgst -sha256 -out ballerina-${{ steps.project-version.outputs.sversion }}.zip.sha256 ballerina/build/distributions/ballerina-${{ steps.project-version.outputs.sversion }}.zip
      - name: Archive Ballerina ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Ballerina ZIP
          path: ballerina/build/distributions/ballerina-*-swan-lake.zip
      - name: Archive Ballerina Short Name ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Ballerina Short Name ZIP
          path: ballerina/build/distributions/ballerina-${{ steps.project-version.outputs.sversion }}.zip
      - name: Archive Linux deb
        uses: actions/upload-artifact@v4
        with:
          name: Linux Installer deb
          path: installers/linux-deb/target/ballerina-*-linux-x64.deb
      - name: Archive Linux rpm
        uses: actions/upload-artifact@v4
        with:
          name: Linux Installer rpm
          path: installers/linux-rpm/rpmbuild/RPMS/x86_64/ballerina-*-linux-x64.rpm
      - name: Archive Linux Installer ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Linux Installer ZIP
          path: ballerina/build/distributions/ballerina-*-linux.zip
      - name: Archive Linux-ARM Installer ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Linux-ARM Installer ZIP
          path: ballerina/build/distributions/ballerina-*-linux-arm.zip
      - name: Archive MacOS Installer ZIP
        uses: actions/upload-artifact@v4
        with:
          name: MacOS Installer ZIP
          path: ballerina/build/distributions/ballerina-*-macos.zip
      - name: Archive MacOS-ARM Installer ZIP
        uses: actions/upload-artifact@v4
        with:
          name: MacOS-ARM Installer ZIP
          path: ballerina/build/distributions/ballerina-*-macos-arm.zip
      - name: Archive Windows Installer ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Windows Installer ZIP
          path: ballerina/build/distributions/ballerina-*-windows.zip
      - name: Archive Linux deb Hashes
        uses: actions/upload-artifact@v4
        with:
          name: Linux deb Hashes
          path: ballerina-${{ steps.project-version.outputs.version }}-linux-x64.deb.sha256
      - name: Archive Linux rpm Hashes
        uses: actions/upload-artifact@v4
        with:
          name: Linux rpm Hashes
          path: ballerina-${{ steps.project-version.outputs.version }}-linux-x64.rpm.sha256
      - name: Archive Ballerina Zip Hashes
        uses: actions/upload-artifact@v4
        with:
          name: Ballerina Zip Hashes
          path: ballerina-${{ steps.project-version.outputs.version }}.zip.sha256
      - name: Archive Ballerina Short Name Hashes
        uses: actions/upload-artifact@v4
        with:
          name: Ballerina Short Name Hashes
          path: ballerina-${{ steps.project-version.outputs.sversion }}.zip.sha256
      - name: Install Ballerina DEB
        run: sudo dpkg -i installers/linux-deb/target/ballerina-*-linux-x64.deb
      - name: Update Installer Test Configs
        run: |
          DISPLAY_TEXT=${{ steps.project-version.outputs.langversion }}
          SWAN_LAKE_LATEST_VERSION="swan-lake-"+$DISPLAY_TEXT
          perl -pi -e "s/^\s*swan-lake-latest-version-display-text=.*/swan-lake-latest-version-display-text=$DISPLAY_TEXT/" ballerina-test-automation/gradle.properties
          perl -pi -e "s/^\s*swan-lake-latest-version=.*/swan-lake-latest-version=$SWAN_LAKE_LATEST_VERSION/" ballerina-test-automation/gradle.properties
      - name: Run Installer Tests
        working-directory: ./ballerina-test-automation/installer-test
        run: ./../gradlew build --stacktrace -scan --console=plain --no-daemon -DballerinaInstalled=true
        env:
          TEST_MODE_ACTIVE: true
      - name: Checkout docker repo
        uses: actions/checkout@v2
        with:
          repository: ballerina-platform/module-ballerina-docker
          path: module-ballerina-docker
      - name: Copy zip artifact
        run: cp ballerina/build/distributions/ballerina-22*.zip module-ballerina-docker/base/docker/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build the docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: module-ballerina-docker/base/docker/
          load: true
          push: false
          tags: ballerina/ballerina:nightly-test
          build-args: |
            BALLERINA_DIST=ballerina-${{ steps.project-version.outputs.sversion }}.zip
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ballerina/ballerina:nightly-test'
          skip-dirs: 'ballerina/runtime/examples'
          format: 'table'
          exit-code: '1'
          timeout: "10m0s"
