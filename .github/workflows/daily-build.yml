name: Daily build

on:
  workflow_dispatch:
  schedule:
    - cron:  '0 0 * * *'

jobs:
  ubuntu-build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
      - name: Get daily docker version
        id: version
        run: echo "::set-output name=version::$(date +'%Y-%m-%d')"
      - name: Get project version
        id: project-version
        run: |
          SHORT_VERSION=$((grep -w 'shortVersion' | cut -d= -f2) < gradle.properties)
          RELEASE_VERSION=$((grep -w "version" | cut -d= -f2) < gradle.properties)
          echo "::set-output name=version::$RELEASE_VERSION"
          echo "::set-output name=sversion::$SHORT_VERSION"
      - name: Build with Gradle
        env:
          packageUser: ${{ github.actor }}
          packagePAT: ${{ secrets.GITHUB_TOKEN }}
          devCentralToken: ${{ secrets.BALLERINA_DEV_CENTRAL_ACCESS_TOKEN }}
        run: ./gradlew clean build --stacktrace --scan --console=plain --no-daemon --continue
      - name: Create linux-deb
        id: run_installers_deb
        run: |
          cd installers/linux-deb
          ./build-ballerina-linux-deb-x64.sh -v ${{ steps.project-version.outputs.version }} -p ./../../ballerina/build/distributions
          echo "Created linux-deb successfully"
      - name: Create linux-rpm
        id: run_installers_rpm
        run: |
          cd installers/linux-rpm
          ./build-ballerina-linux-rpm-x64.sh -v ${{ steps.project-version.outputs.version }} -p ./../../ballerina/build/distributions
          echo "Created linux-rpm successfully"
      - name: Archive Ballerina ZIP
        uses: actions/upload-artifact@v2
        with:
          name: Ballerina ZIP
          path: ballerina/build/distributions/ballerina-swan-lake-*.zip
      - name: Archive Ballerina Short Name ZIP
        uses: actions/upload-artifact@v2
        with:
          name: Ballerina Short Name ZIP
          path: ballerina/build/distributions/ballerina-sl*.zip
      - name: Archive Linux deb
        uses: actions/upload-artifact@v2
        with:
          name: Linux Installer deb
          path: installers/linux-deb/target/ballerina-linux-installer-x64-*.deb
      - name: Archive Linux rpm
        uses: actions/upload-artifact@v2
        with:
          name: Linux Installer rpm
          path: installers/linux-rpm/rpmbuild/RPMS/x86_64/ballerina-linux-installer-x64-*.rpm
      - name: Archive MacOS installer ZIP
        uses: actions/upload-artifact@v2
        with:
          name: MacOS installer ZIP
          path: ballerina/build/distributions/ballerina-macos-*.zip
      - name: Archive Windows Installer ZIP
        uses: actions/upload-artifact@v2
        with:
          name: Windows Installer ZIP
          path: ballerina/build/distributions/ballerina-windows-*.zip
      - name: Install Ballerina DEB
        run: sudo dpkg -i installers/linux-deb/target/ballerina-linux-installer-x64-*.deb
      - name: Run Installer Tests
        working-directory: ./ballerina-test-automation/installer-test
        run: .././gradlew build --stacktrace -scan --console=plain --no-daemon -DballerinaInstalled=true
      - name: Notify failure
        if: ${{ failure() }}
        run: |
          curl \
          -X POST 'https://chat.googleapis.com/v1/spaces/${{secrets.NOTIFICATIONS_CHAT_ID}}/messages?key=${{secrets.NOTIFICATIONS_CHAT_KEY}}&token=${{secrets.NOTIFICATIONS_CHAT_TOKEN}}' \
          --header 'Content-Type: application/json' \
          -d '{"text": "*ballerina-distribution daily build failure* \nPlease \n visit <https://github.com/ballerina-platform/ballerina-distribution/actions?query=workflow%3A%22Daily+build%22|the daily build page> for more information"}'
      - name: Checkout docker repo
        uses: actions/checkout@v2
        with:
          repository: ballerina-platform/module-ballerina-docker
          path: module-ballerina-docker
      - name: Copy zip artifact
        run: cp ballerina/build/distributions/ballerina-sl*.zip module-ballerina-docker/base/docker/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build the docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: module-ballerina-docker/base/docker/
          load: true
          push: false
          tags: ballerina/ballerina:nightly-test
          build-args: |
            BALLERINA_DIST=ballerina-${{ steps.project-version.outputs.sversion }}.zip
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ballerina/ballerina:nightly-test'
          format: 'table'
          exit-code: '1'
          timeout: "10m0s"
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: module-ballerina-docker/base/docker/
          push: true
          tags: ballerina/ballerina:nightly-${{ steps.version.outputs.version }}, ballerina/ballerina:nightly
          build-args: |
            BALLERINA_DIST=ballerina-${{ steps.project-version.outputs.sversion }}.zip
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: Run Build Performance Samples
        env:
          packageUser: ${{ github.actor }}
          packagePAT: ${{ secrets.GITHUB_TOKEN }}
          devCentralToken: ${{ secrets.BALLERINA_DEV_CENTRAL_ACCESS_TOKEN }}
        run: ./gradlew :build-time-tests:processData --console=plain --no-daemon --continue
      - name: Archive Build Performance CSV
        uses: actions/upload-artifact@v2
        with:
          name: BuildTimeCSV
          path: build-time-tests/build/build-time-data/buildTimeData.csv
    outputs:
      project-version: ${{ steps.project-version.outputs.version }}

  windows-build:

    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
      - name: Build with Gradle
        env:
          packageUser: ${{ github.actor }}
          packagePAT: ${{ secrets.GITHUB_TOKEN }}
          devCentralToken: ${{ secrets.BALLERINA_DEV_CENTRAL_ACCESS_TOKEN }}
        run: ./gradlew.bat clean build --stacktrace --scan --console=plain --no-daemon -x test

  ubuntu-rpm-installer-test:
    needs: ubuntu-build
    runs-on: ubuntu-latest
    container: centos:latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
      - name: Download Ballerina rpm Installer
        uses: actions/download-artifact@v2
        with:
          name: Linux Installer rpm
      - name: Install Ballerina RPM
        run: |
          rpm -ivh ballerina-linux-installer-x64-*.rpm
      - name: Run Installer Tests
        working-directory: ./ballerina-test-automation/installer-test
        run: |
          bal -v
          .././gradlew build --stacktrace -scan --console=plain --no-daemon -DballerinaInstalled=true

  macos-installer-build:

    needs: ubuntu-build
    runs-on: macos-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download MacOS Intaller Zip
        uses: actions/download-artifact@v2
        with:
          name: MacOS installer ZIP
      - name: Create macos-pkg
        id: run_installers_pkg
        run: |
          cd installers/mac
          ./build-ballerina-macos-x64.sh -v ${{ needs.ubuntu-build.outputs.project-version }} -p ./../../
          echo "Created macos-pkg successfully"
      - name: Archive MacOS pkg
        uses: actions/upload-artifact@v2
        with:
          name: MacOS Installer pkg
          path: installers/mac/target/pkg/ballerina-macos-installer-x64-*.pkg
      - name: Install Ballerina PKG
        run: sudo installer -pkg installers/mac/target/pkg/ballerina-macos-installer-x64-*.pkg -target /
      - name: Run Installer Tests
        working-directory: ./ballerina-test-automation/installer-test
        run: .././gradlew build --stacktrace -scan --console=plain --no-daemon -DballerinaInstalled=true

  windows-installer-build:

    needs: ubuntu-build
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '2.1.x'
      - name: Install GUID Generator
        run: dotnet tool install -g dotnet-guid
      - name: Download Windows Intaller Zip
        uses: actions/download-artifact@v2
        with:
          name: Windows Installer ZIP
      - name: Create windows-msi
        id: run_installers_msi
        run: |
          $env:Path += ";C:\Program Files (x86)\WiX Toolset v3.11\bin"
          move installers\windows .\
          ren windows w
          cd w
          .\build-ballerina-windows-x64.bat --version ${{ needs.ubuntu-build.outputs.project-version }} --path .\..\
          echo "Created windows-msi successfully"
      - name: Archive Windows msi
        uses: actions/upload-artifact@v2
        with:
          name: Windows Installer msi
          path: w\target\msi\ballerina-windows-installer-x64-*.msi

  trigger-notifications:

    needs: [ubuntu-build, macos-installer-build, windows-installer-build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Invoke Connector Ballerina Version Bump
        run: |
          ballerinaVersion=$((grep -w 'ballerinaLangVersion' | cut -d= -f2) < gradle.properties)
          echo "Triggering connectors dependency bumps..." && \
          curl -X POST \
          https://api.github.com/repos/ballerina-platform/ballerina-release/dispatches \
          -H 'Accept: application/vnd.github.v3+json' \
          -H 'Authorization: token ${{ secrets.BALLERINA_BOT_TOKEN }}' \
          --data "{
            \"event_type\": \"connector-update\",
            \"client_payload\": {
              \"ballerinaVersion\": \"$ballerinaVersion\"
            }
          }"
