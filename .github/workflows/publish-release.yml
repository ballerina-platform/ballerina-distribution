name: Publish release

on: push
#  workflow_dispatch:

jobs:
  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
#      - name: Set version env variable
#        id: version-set
#        run: |
#          SHORT_VERSION=$((grep -w 'shortVersion' | cut -d= -f2) < gradle.properties)
#          RELEASE_VERSION=$((grep -w 'version' | cut -d= -f2) < gradle.properties | rev | cut --complement -d- -f1 | rev)
#          echo VERSION=$RELEASE_VERSION >> $GITHUB_ENV
#          echo "::set-output name=version::$RELEASE_VERSION"
#          echo "::set-output name=sversion::$SHORT_VERSION"
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Pre release depenency version update
        env:
          GITHUB_TOKEN: ${{ secrets.PARKAVI_ACCESS_TOKEN }}
        run: |
          git config user.name "parkavi11"
          git config user.email "parkavi113@gmail.com"
          git checkout -b release-${VERSION}
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Update installer version
        env:
         GITHUB_TOKEN: ${{ secrets.PARKAVI_ACCESS_TOKEN }}
         packageUser: ${{ secrets.PARKAVI_SECRET }}
         packagePAT: ${{ secrets.PARKAVI_PAT }}
        run: |
          ./gradlew build updateInstallerVersion -x test
          git commit -m "update auto generated installer version"
          git add .
      - name: Publish artifact
        env:
          GITHUB_TOKEN: ${{ secrets.PARKAVI_ACCESS_TOKEN }}
          packageUser: ${{ secrets.PARKAVI_SECRET }}
          packagePAT: ${{ secrets.PARKAVI_PAT }}
#          devCentralToken: ${{ secrets.BALLERINA_DEV_CENTRAL_ACCESS_TOKEN }}
        run: |
          ./gradlew build -Pversion=${VERSION}
          ./gradlew release -Prelease.useAutomaticVersion=true -x test
#      - name: Create release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
#        with:
#          tag_name: "v${{ steps.version-set.outputs.version }}"
#          release_name: ${{ steps.version-set.outputs.version }}
#          draft: false
#          prerelease: false
#      - name: Upload zip artifacts
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_name: ballerina-${{ steps.version-set.outputs.version }}.zip
#          asset_path: ballerina/build/distributions/ballerina-${{ steps.version-set.outputs.version }}.zip
#          asset_content_type: application/octet-stream
#      - name: Upload zip without tool artifacts
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_name: ballerina-${{ steps.version-set.outputs.sversion }}.zip
#          asset_path: ballerina/build/distributions/ballerina-${{ steps.version-set.outputs.sversion }}.zip
#          asset_content_type: application/octet-stream
#      - name: Upload Linux zip artifacts
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_name: ballerina-linux-${{ steps.version-set.outputs.version }}.zip
#          asset_path: ballerina/build/distributions/ballerina-linux-${{ steps.version-set.outputs.version }}.zip
#          asset_content_type: application/octet-stream
#      - name: Upload MacOS zip artifacts
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_name: ballerina-macos-${{ steps.version-set.outputs.version }}.zip
#          asset_path: ballerina/build/distributions/ballerina-macos-${{ steps.version-set.outputs.version }}.zip
#          asset_content_type: application/octet-stream
#      - name: Upload Windows zip artifacts
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_name: ballerina-windows-${{ steps.version-set.outputs.version }}.zip
#          asset_path: ballerina/build/distributions/ballerina-windows-${{ steps.version-set.outputs.version }}.zip
#          asset_content_type: application/octet-stream
#      - name: Post release PR
#        env:
#          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
#        run: |
#          curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
#          bin/hub pull-request -m "[Automated] Sync master after "$VERSION" release"
