# This example reads two properties (i.e., `username` and `password`) from a configuration file and prints the username in the output. 

# Sensitive data you have in configuration files such as passwords should be encrypted and accessed securely in code. 
# Therefore, first, execute the command below to encrypt the `password` property.
ballerina encrypt

# Enter `ballerina` as the value and `12345` as the secret when prompted. 

# Note the encrypted value you get in the output. 

# Next, create a new file (e.g., `ballerina.conf`) in a preferred location 
# and place the configurations below to define the two `username` and `password` properties.

#
# ```
# [app.auth]
# username="jack"
# password="@encrypted:{njjb2H9u7Bax2FZX/X+UPZ50lR6+ckKmkesE87Yuw/x9wE1yvhcww1ehOc+mjgCc}"}"
#
# ```

# To run this sample, navigate to the directory, which contains the `config_api.bal` file, and execute the `bal run` command as follows.
# The path to the configuration file can be either an absolute or a relative path. Also, enter the secret as `12345` when prompted.
bal run config_api.bal --b7a.config.file=<PATH_TO_THE_CONFIG_FILE>

# The output will be as follows:
ballerina: enter secret for config value decryption:
Authenticating user 'jack'

# Alternatively, if you have the `ballerina.conf` file in the same directory, which includes the `config_api.bal` file, execute the command below without passing the `--b7a.config.file` property. 
bal run config_api.bal

# Then, Ballerina looks for and uses the `ballerina.conf` file in the current directory. 

# However, instead of creating a configuration file, the properties to be read can also be given via CLI parameters as follows. 
bal run config_api.bal --app.auth.username=jack --app.auth.password=@encrypted:{njjb2H9u7Bax2FZX/X+UPZ50lR6+ckKmkesE87Yuw/x9wE1yvhcww1ehOc+mjgCc}"}
