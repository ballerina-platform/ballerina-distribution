# To run this sample, navigate to the directory that contains the
# `.bal` file, and execute the `bal run` command below.

# Use the ballerina `run` command to invoke the `main` function specifying `Alice`
# as the command line string argument for `name`. `18` would be set as the value 
# for `age` and `Freshman` would be set as the value for `year`.
bal run the_main_function.bal -- --name=Alice
Name: Alice, Age: 18, Year: Freshman

# Use the ballerina `run` command to invoke the `main` function specifying `Alice`
# as the string argument for `name` and `20` as the integer value for
# `age`. Both arguments are specified as command line options.
bal run the_main_function.bal -- --name=Alice --age=20
Name: Alice, Age: 20, Year: Freshman

# Use the ballerina `run` command to invoke the `main` function specifying `Alice`
# as the string argument for `name` and `Sophomore` as the string argument for
# `year`. Both arguments are specified as command line options.
bal run the_main_function.bal --name=Alice --year=Sophomore
Name: Alice, Age: 18, Year: Sophomore

# Use the ballerina `run` command to invoke the `main` function specifying values for
# all parameters, including the array parameter. All arguments are specified as
# options. Note that we can specify options without using `=` sign. This is done for
# `year` and `modules` parameters.
bal run the_main_function.bal -- --name=Alice --age=20 --year Sophomore --modules math --modules physics
Name: Alice, Age: 20, Year: Sophomore, Module(s): ["math","physics"]

# Use the ballerina `run` command to invoke the `main` function specifying an invalid 
# string as the argument for `name`. The `error` returned would be printed.
bal run the_main_function.bal -- --name=Ali
error: InvalidName {"message":"invalid length"}
