// A strand is a lightweight thread construct. There are two situations in which the bal runtime creates a new strand:
// (1) To execute statements in a named `worker` declaration
// (2) To execute the function or method in the `start` action.  By default,
// these new strands will be part of the same thread as the current strand.
// Strands that belong to the same thread share the following characteristics. Only one strand can run simultaneously.
// The currently-running strand should yield to switch its thread to execute another strand.
// Therefore, strands belonging to a particular thread are cooperatively multitasked.
// All the strands created in a particular execution of a Ballerina program will be executed
// sequentially by a single thread. In some situations, it would be desirable to assign strands to different threads.
// The `@strand` annotation helps you to achieve this.
// You can annotate the named worker declarations and start actions with the `@strand` annotation to instruct
// the bal runtime to put new strands in a separate thread from the current strand.
