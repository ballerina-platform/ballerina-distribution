/*
 ~ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~ *
 ~ * Licensed under the Apache License, Version 2.0 (the "License");
 ~ * you may not use this file except in compliance with the License.
 ~ * You may obtain a copy of the License at
 ~ *
 ~ * http://www.apache.org/licenses/LICENSE-2.0
 ~ *
 ~ * Unless required by applicable law or agreed to in writing, software
 ~ * distributed under the License is distributed on an "AS IS" BASIS,
 ~ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ * See the License for the specific language governing permissions and
 ~ * limitations under the License.
 ~ */


import groovy.json.JsonSlurper
import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - Tools'

ext {
    jreLocation = "downloads/ballerina-jre-artifacts-zip/"
    distributionName = "ballerina"
}

configurations {
    jBallerinaDistribution
    ballerinaDistribution
    ballerinaLinuxDistribution
    ballerinaMacDistribution
    ballerinaWindowsDistribution
    repoBuilder
}

dependencies {
    repoBuilder project(':dist-repo-builder')
}

def jBallerinaDistributionZip = file("$project.buildDir/distributions/ballerina-${shortVersion}.zip")
def ballerinaDistributionZip = file("$project.buildDir/distributions/ballerina-${ballerinaLangVersion}.zip")
def ballerinaLinuxDistributionZip = file("$project.buildDir/distributions/ballerina-linux-${ballerinaLangVersion}.zip")
def ballerinaMacDistributionZip = file("$project.buildDir/distributions/ballerina-macos-${ballerinaLangVersion}.zip")
def ballerinaWindowsDistributionZip = file("$project.buildDir/distributions/ballerina-windows-${ballerinaLangVersion}.zip")

task unpackBallerinaJre(type: Download) {
    group = "unpack_dependencies"
    def jreBaseURL = "https://github.com/ballerina-platform/ballerina-custom-jre/releases/download/${ballerinaJreVersion}"
    src([
            "${jreBaseURL}/ballerina-jre-linux-${ballerinaJreVersion}.zip",
            "${jreBaseURL}/ballerina-jre-macos-${ballerinaJreVersion}.zip",
            "${jreBaseURL}/ballerina-jre-windows-${ballerinaJreVersion}.zip"
    ])
    onlyIfModified true
    dest "${jreLocation}"
}

task unpackJballerinaTools(type: Copy) {
    group = "unpack_dependencies"
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
    }
}

task unpackDevTools(type: Copy) {
    group = "unpack_dependencies"
    configurations.devTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
    }
}

task unpackAwsLambdaBala(type: Copy) {
    group = "unpack_dependencies"
    configurations.awsLambdaBala.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
    }
}

task unpackAwsLambdaExamples(type: Copy) {
    group = "unpack_dependencies"
    configurations.awsLambdaExamples.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
    }
}

task unpackAzFunctionsExamples(type: Copy) {
    group = "unpack_dependencies"
    configurations.azFunctionsExamples.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
    }
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task unpackC2cLibs() {
    doLast {
        configurations.ballerinaC2cLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task unpackC2cTooling() {
    doLast {
        configurations.ballerinaC2cTooling.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task unpackC2cExamples(type: Copy) {
    group = "unpack_dependencies"
    configurations.ballerinaC2cExamples.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", "c2c-examples-zip")
    }
}

task unpackObservabilityExtensions() {
    doLast {
        configurations.ballerinaObserveExtensions.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task downloadBalCommand(type: Download) {
    group = "unpack_dependencies"
    def commandBaseURL = "https://github.com/ballerina-platform/ballerina-update-tool/releases/download/v${ballerinaCommandVersion}"
    src([
            "${commandBaseURL}/ballerina-command-${ballerinaCommandVersion}.zip"
    ])
    onlyIfModified true
    dest "${buildDir}/target/"
}

task unpackBalCommand(type: Copy) {
    group = "unpack_dependencies"
    from zipTree { "${buildDir}/target/ballerina-command-${ballerinaCommandVersion}.zip" }
    into new File("${buildDir}/target/")
}

task extractJreForLinux(type: Copy) {
    group = "extract_jre"
    from zipTree { "${jreLocation}/ballerina-jre-linux-${ballerinaJreVersion}.zip" }
    into("${buildDir}/target/extracted-jre-linux")
}

task extractJreForMac(type: Copy) {
    group = "extract_jre"
    from zipTree { "${jreLocation}/ballerina-jre-macos-${ballerinaJreVersion}.zip" }
    into("${buildDir}/target/extracted-jre-macos")
}

task extractJreForWindows(type: Copy) {
    group = "extract_jre"
    from zipTree { "${jreLocation}/ballerina-jre-windows-${ballerinaJreVersion}.zip" }
    into("${buildDir}/target/extracted-jre-windows")
}

task deleteTemporaryFiles(type: Delete) {
    delete 'build/target'
}

task copyOtherRepos(type: Copy) {
    def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        from("${artifactExtractedPath}/libs") {
            into "bre/lib/"
        }
        from("${artifactExtractedPath}/bala") {
            into "repo/bala"
        }
        from("${artifactExtractedPath}/cache") {
            into "repo/cache"
        }
    }

    /* C2C Libraries */
    configurations.ballerinaC2cLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        from("${artifactExtractedPath}/libs") {
            into "bre/lib/"
        }
        from("${artifactExtractedPath}/bala") {
            into "repo/bala"
        }
        from("${artifactExtractedPath}/cache") {
            into "repo/cache"
        }
    }

    /* C2C Tooling */
    configurations.ballerinaC2cTooling.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        from("${artifactExtractedPath}") {
            into "lib/tools/lang-server/lib/"
        }
    }

    /* Observability extensions */
    configurations.ballerinaObserveExtensions.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        from("${artifactExtractedPath}/libs") {
            into "bre/lib/"
        }
        from("${artifactExtractedPath}/bala") {
            into "repo/bala"
        }
        from("${artifactExtractedPath}/cache") {
            into "repo/cache"
        }
    }
}

task buildDistRepo(type: JavaExec) {
    classpath = project.configurations.repoBuilder
    main = 'io.ballerina.dist.DistRepoBuilder'
    args "$buildDir/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
}

task copyDevToolsCoverageReport(type: Copy) {
    from "$project.buildDir/target/extracted-distributions/ballerina-dev-tools-zip/testerina-report-tools-${devToolsVersion}.zip"
    into "$project.buildDir/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/lib/tools/coverage"
    rename("testerina-report-tools-${devToolsVersion}.zip", "report.zip")
}
task copyDevToolsDocUi(type: Copy) {
    from zipTree("$project.buildDir/target/extracted-distributions/ballerina-dev-tools-zip/docerina-ui-${devToolsVersion}.zip")
    into "$project.buildDir/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/lib/tools/doc-ui"
}

task filterApiDocs(type: Delete) {
    delete "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/docs/ballerina/lang.__internal"
    delete "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/docs/ballerina/lang.annotations"
}

task combineDocs(type: Exec) {
    workingDir "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/docs"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', "$project.buildDir/target/extracted-distributions/jballerina-tools-zip/" +
                "jballerina-tools-${ballerinaLangVersion}/bin/bal.bat", "doc", "--combine"
    } else {
        commandLine "$project.buildDir/target/extracted-distributions/jballerina-tools-zip/" +
                "jballerina-tools-${ballerinaLangVersion}/bin/bal", "doc", "--combine"
    }
}

task packageDist(type: Zip) {
    group = "package_distribution"
    description = 'Ballerina Tools Distribution Assembly'
    baseName = "${distributionName}"
    ext { parentDir = "${baseName}-${shortVersion}" }
    archiveFileName = "${baseName}-${shortVersion}.zip"
    entryCompression = ZipEntryCompression.STORED

    into("${parentDir}") {
        from "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
    }
    into("${parentDir}/examples") {
        from "${project.rootDir}/examples/"
        fileMode = 0755
    }
    // Code2Cloud Extension Examples
    into("${parentDir}/examples") {
        from "build/target/extracted-distributions/c2c-examples-zip"
        exclude "index.js"
    }

    /* Files */
    into("${parentDir}/lib/") {
        from "lib/version.txt"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: version])
    }
    /* Dependencies */
    into("${parentDir}/bre/lib") {
        from configurations.exten
    }

    doLast {
        println 'Ballerina Tools Distribution Packaged'
    }

    outputs.file jBallerinaDistributionZip
}

task packageDistZip(type: Zip) {
    group = "package_distribution"
    description = 'Ballerina Distribution Assembly'
    baseName = "${distributionName}"
    ext { parentDir = "${baseName}-${version}" }
    entryCompression = ZipEntryCompression.STORED

    into("${parentDir}") {
        from({ new File(temporaryDir, 'dependencies').mkdirs(); temporaryDir })
    }

    into("${parentDir}/distributions/ballerina-${shortVersion}/examples/") {
        from "${project.rootDir}/examples/"
        fileMode = 0755
    }
    // Code2Cloud Extension Examples
    into("${parentDir}/distributions/ballerina-${shortVersion}/examples") {
        from "build/target/extracted-distributions/c2c-examples-zip"
        exclude "index.js"
    }

    /* Tools artifacts */
    into("${parentDir}/distributions/ballerina-${shortVersion}") {
        from "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
        exclude "distributions/ballerina-version"
        exclude "distributions/installer-version"
        exclude "/bin/version.txt"

    }
    into("${parentDir}") {
        from "../resources/tools"
        exclude "distributions/ballerina-version"
        exclude "distributions/installer-version"
        filter(ReplaceTokens, tokens: [ballerinaCommandVersion: ballerinaCommandVersion])
    }

    /* Files */
    into("${parentDir}/distributions/ballerina-${shortVersion}/bin") {
        from "lib/version.txt"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: shortVersion])
    }
    into("${parentDir}/distributions") {
        from "../resources/tools/distributions/ballerina-version"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: shortVersion])
    }
    into("${parentDir}/distributions") {
        from "../resources/tools/distributions/installer-version"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [uuid: installerVersion])
    }
    into("${parentDir}/bin") {
        from "build/target/ballerina-command-${ballerinaCommandVersion}/bin/bal"
        fileMode = 0775
        filter(ReplaceTokens, tokens: [ballerinaCommandVersion: ballerinaCommandVersion])
    }
    into("${parentDir}/bin") {
        from "build/target/ballerina-command-${ballerinaCommandVersion}/bin/bal.bat"
        fileMode = 0775
        filter(ReplaceTokens, tokens: [ballerinaCommandVersion: ballerinaCommandVersion])
    }
    into("${parentDir}/lib") {
        from "build/target/ballerina-command-${ballerinaCommandVersion}/lib/ballerina-command-${ballerinaCommandVersion}.jar"
        fileMode = 0775
    }

    /* Dependencies */
    into("${parentDir}/distributions/ballerina-${shortVersion}/bre/lib") {
        from configurations.exten
    }

    doLast {
        println 'Ballerina Distribution Packaged'
    }

    outputs.file ballerinaDistributionZip
}

task packageDistLinux(type: Zip) {
    group = "package_distribution"
    description = 'Ballerina Linux Distribution Assembly'
    baseName = "${distributionName}-linux"
    ext { parentDir = "${baseName}-${version}" }
    entryCompression = ZipEntryCompression.STORED

    into("${parentDir}/dependencies/jdk-11.0.8+10-jre") {
        from "build/target/extracted-jre-linux"
        fileMode = 0755
    }
    into("${parentDir}/distributions/ballerina-${shortVersion}/examples/") {
        from "${project.rootDir}/examples/"
        fileMode = 0755
    }
    // Code2Cloud Extension Examples
    into("${parentDir}/distributions/ballerina-${shortVersion}/examples") {
        from "build/target/extracted-distributions/c2c-examples-zip"
        exclude "index.js"
    }

    /* Tools artifacts */
    into("${parentDir}/distributions/ballerina-${shortVersion}") {
        from "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
        exclude "distributions/ballerina-version"
        exclude "distributions/installer-version"
        exclude "/bin/bal.bat"
        exclude "/bin/version.txt"
    }
    into("${parentDir}") {
        from "../resources/tools"
        exclude "distributions/ballerina-version"
        exclude "distributions/installer-version"
        exclude "**/scripts/**"
    }

    /* Files */
    into("${parentDir}/distributions/ballerina-${shortVersion}/bin") {
        from "lib/version.txt"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: version])
    }
    into("${parentDir}/distributions") {
        from "../resources/tools/distributions/ballerina-version"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: shortVersion])
    }
    into("${parentDir}/distributions") {
        from "../resources/tools/distributions/installer-version"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [uuid: installerVersion])
    }
    into("${parentDir}/bin") {
        from "build/target/ballerina-command-${ballerinaCommandVersion}/bin/bal"
        fileMode = 775
        filter(ReplaceTokens, tokens: [ballerinaCommandVersion: ballerinaCommandVersion])
    }
    into("${parentDir}/lib") {
        from "build/target/ballerina-command-${ballerinaCommandVersion}/lib/ballerina-command-${ballerinaCommandVersion}.jar"
        fileMode = 0775
    }

    /* Dependencies */
    into("${parentDir}/distributions/ballerina-${shortVersion}/bre/lib") {
        from configurations.exten
    }

    doLast {
        println 'Ballerina Linux Distribution Packaged'
    }

    outputs.file ballerinaLinuxDistributionZip
}

task packageDistMac(type: Zip) {
    group = "package_distribution"
    description = 'Ballerina MacOS Distribution Assembly'
    baseName = "${distributionName}-macos"
    ext { parentDir = "${baseName}-${version}" }
    entryCompression = ZipEntryCompression.STORED

    into("${parentDir}/dependencies/jdk-11.0.8+10-jre") {
        from "build/target/extracted-jre-macos"
        fileMode = 0755
    }
    into("${parentDir}/distributions/ballerina-${shortVersion}/examples/") {
        from "${project.rootDir}/examples/"
        fileMode = 0755
    }

    // Code2Cloud Extension Examples
    into("${parentDir}/distributions/ballerina-${shortVersion}/examples") {
        from "build/target/extracted-distributions/c2c-examples-zip"
        exclude "index.js"
    }

    /* Tools artifacts */
    into("${parentDir}/distributions/ballerina-${shortVersion}") {
        from "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
        exclude "distributions/ballerina-version"
        exclude "distributions/installer-version"
        exclude "/bin/bal.bat"
        exclude "/bin/version.txt"
    }

    /* Files */
    into("${parentDir}/distributions/ballerina-${shortVersion}/bin") {
        from "lib/version.txt"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: version])
    }
    into("${parentDir}/distributions") {
        from "../resources/tools/distributions/ballerina-version"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: shortVersion])
    }
    into("${parentDir}/distributions") {
        from "../resources/tools/distributions/installer-version"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [uuid: installerVersion])
    }
    into("${parentDir}/bin") {
        from "build/target/ballerina-command-${ballerinaCommandVersion}/bin/bal"
        fileMode = 775
        filter(ReplaceTokens, tokens: [ballerinaCommandVersion: ballerinaCommandVersion])
    }
    into("${parentDir}/lib") {
        from "build/target/ballerina-command-${ballerinaCommandVersion}" +
                "/lib/ballerina-command-${ballerinaCommandVersion}.jar"
        fileMode = 0775
    }

    /* Dependencies */
    into("${parentDir}/distributions/ballerina-${shortVersion}/bre/lib") {
        from configurations.exten
    }

    doLast {
        println 'Ballerina MacOS Distribution Packaged'
    }

    outputs.file ballerinaMacDistributionZip
}

task packageDistWindows(type: Zip) {
    group = "package_distribution"
    description = 'Ballerina Windows Distribution Assembly'
    baseName = "${distributionName}-windows"
    ext { parentDir = "${baseName}-${version}" }
    entryCompression = ZipEntryCompression.STORED

    into("${parentDir}/dependencies/jdk-11.0.8+10-jre") {
        from "build/target/extracted-jre-windows"
        fileMode = 0755
    }
    into("${parentDir}/distributions/ballerina-${shortVersion}/examples/") {
        from "${project.rootDir}/examples/"
        fileMode = 0755
    }

    // Code2Cloud Extension Examples
    into("${parentDir}/distributions/ballerina-${shortVersion}/examples") {
        from "build/target/extracted-distributions/c2c-examples-zip"
        exclude "index.js"
    }

    /* Tools artifacts */
    into("${parentDir}/distributions/ballerina-${shortVersion}") {
        from "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
        exclude "distributions/ballerina-version"
        exclude "distributions/installer-version"
        exclude "/bin/bal"
        exclude "/bin/version.txt"
    }

    /* Files */
    into("${parentDir}/distributions/ballerina-${shortVersion}/bin") {
        from "lib/version.txt"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: version])
    }
    into("${parentDir}/distributions") {
        from "../resources/tools/distributions/ballerina-version"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: shortVersion])
    }
    into("${parentDir}/distributions") {
        from "../resources/tools/distributions/installer-version"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [uuid: installerVersion])
    }
    into("${parentDir}/bin") {
        from "build/target/ballerina-command-${ballerinaCommandVersion}/bin/bal.bat"
        fileMode = 775
        filter(ReplaceTokens, tokens: [ballerinaCommandVersion: ballerinaCommandVersion])
    }
    into("${parentDir}/lib") {
        from "build/target/ballerina-command-${ballerinaCommandVersion}/lib/ballerina-command-${ballerinaCommandVersion}.jar"
        fileMode = 0775
    }

    /* Dependencies */
    into("${parentDir}/distributions/ballerina-${shortVersion}/bre/lib") {
        from configurations.exten
    }

    doLast {
        println 'Ballerina Windows Distribution Packaged'
    }

    outputs.file ballerinaWindowsDistributionZip
}

task unzipDistForTests(type: Copy) {
    from zipTree("${project.rootDir}/ballerina/build/distributions/ballerina-${version}.zip")
    into file("${project.rootDir}/ballerina/build/target/extracted-distributions/")
}

artifacts {
    jBallerinaDistribution file: jBallerinaDistributionZip, builtBy: packageDist
    ballerinaDistribution file: ballerinaDistributionZip, builtBy: packageDistZip
    ballerinaLinuxDistribution file: ballerinaLinuxDistributionZip, builtBy: packageDistLinux
    ballerinaMacDistribution file: ballerinaMacDistributionZip, builtBy: packageDistMac
    ballerinaWindowsDistribution file: ballerinaWindowsDistributionZip, builtBy: packageDistWindows
}

task testExamples() {
    def distPath = "${project.rootDir}/ballerina/build/target/extracted-distributions/ballerina-${version}"
    def bbeList = []

    PatternSet patternSet = new PatternSet()
    patternSet.exclude("**/.ballerina/**")
    patternSet.exclude("**/Ballerina.toml")
    patternSet.exclude("**/Ballerina.lock")
    patternSet.exclude("**/ballerina-internal.log")
    inputs.files(files("${distPath}/examples").asFileTree.matching(patternSet))

    // The following BBEs will not be verified by compiling/running.
    def buildIgnoreList = [
            'proto-to-ballerina',
            'docker-deployment',
            'c2c-deployment',
            'aws-lambda-deployment',
            'azure-functions-deployment',
            'openshift-deployment',
            'grpc-server-streaming',
            'grpc-secured-unary',
            'grpc-bidirectional-streaming',
            'grpc-client-streaming',
            'grpc-unary-blocking',
            'testerina-guarantee-test-execution-order',
            'testerina-data-driven-tests',
            'testerina-before-and-after-suite',
            'testerina-before-each-test',
            'testerina-before-and-after-test',
            'testerina-assertions',
            'testerina-before-and-after-each',
            'testerina-before-and-after-groups',
            'testerina-group-tests',
            'testerina-mocking-objects',
            'testerina-mocking-functions',
            'http-caching-client',
            'http-data-binding',
            'http-1.1-to-2.0-protocol-switch',
            'basic-https-listener-client',
            'https-listener',
            'http-client-endpoint',
            'response-with-multiparts',
            'mutual-ssl',
            'gauge-metrics',
            'counter-metrics',
            'tracing',
            'openapi-to-ballerina',
            'taint-checking', // Should not compile
            'http-client-with-basic-auth',
            'http-client-with-bearer-token-auth',
            'http-client-with-self-signed-jwt-auth',
            'http-client-with-oauth2-client-credentials-grant-type',
            'http-client-with-oauth2-password-grant-type',
            'http-client-with-oauth2-refresh-token-grant-type',

            // Disabling due to pending migration for service typing
            'websocket-cookie',
            'websocket-retry',
            'websocket-failover',
            'http-filters',

            // Disabling sice we could not include credentials in the BBE
            'websub-webhook-sample',

            // Disabling temporarily (https://github.com/ballerina-platform/ballerina-distribution/issues/1242)
            "ballerina-to-openapi",
            "log-api",
            "optional-type",
            "while",

            // Disabling since these modules are removed from the distribution
            'kafka-consumer-client',
            'kafka-producer',
            'kafka-consumer-service',
            'kafka-producer-transactional',
            'kafka-consumer-group-service',
            'kafka-authentication-sasl-plain-consumer',
            'kafka-authentication-sasl-plain-producer',
            'nats-basic-client',
            'nats-streaming-client',
            'nats-streaming-consumer-with-data-binding',
            'nats-streaming-durable-subscriptions',
            'nats-streaming-queue-group',
            'nats-streaming-start-position',
            'rabbitmq-producer',
            'rabbitmq-consumer',
            'rabbitmq-consumer-with-client-acknowledgement',
            'rabbitmq-consumer-with-data-binding',
            'rabbitmq-consumer-with-qos-settings',
            'rabbitmq-transaction-producer',
            'rabbitmq-transaction-consumer',

            // Disabling since JDBC & MySQL modules are removed from the distribution
            'jdbc-parameterized-query',
            'jdbc-execute-operation',
            'jdbc-query-operation',
            'jdbc-init-options',
            'jdbc-complex-type-queries', // Consists date time in output
            'jdbc-batch-execute-operation', // Consists transaction server start log
            'mysql-init-options',
            'mysql-query-operation',
            'mysql-complex-type-queries',
            'mysql-execute-operation',
            'mysql-batch-execute-operation',
            'mysql-parameterized-query',
            'mysql-call-stored-procedures',
            'local-transactions',
            'xa-transactions',
            'retry-transactions',
    ]

    // The following BBEs will be excluded from output verification, which means verifying the output of the `.bal` file
    // against the output given at `.out` file. But will be verified by compiling and running tests if it is not added
    // to the above buildIgnoreList.
    def outputVerificationIgnoreList = [
            'the-main-function', //Needs user input
            'local-transactions-with-handlers', // Xid varies
            'distributed-transactions', // has timestamps in the output
            'optional-type',  // Needs inputs at runtime
            'while',        // Needs inputs at runtime
            'any-type', // Has time component
            'record-readonly-fields', // Has user name in output
            'checkpanic', // Has user name in output
            'deprecation', // Contains user input
            'foreach', // Has tabs for formatting in input
            'grpc-server-streaming',
            'http-compression',
            'http-redirects',
            'http-2-0-server-push',
            'http-cookies',
            'header-based-routing',
            'http-circuit-breaker',
            'request-with-multiparts',
            'different-payload-types',
            'absolute-path-and-path',
            'http-trace-logs',
            'restrict-by-media-type',
            'http-cors',
            'http-client-data-binding',
            'websocket-basic-sample',
            'websocket-chat-application',
            'websocket-async-text-client',
            'websocket-async-binary-client',
            'websocket-text-client',
            'websocket-binary-client',
            'websocket-cookie',
            'websocket-failover',
            'websocket-proxy-server',
            'websocket-retry',
            'random',  // Output varies
            'log-api',
            'udp-client',
            'udp-connect-client',
            'udp-listener',
            'tcp-listener',
            'tcp-client',
            'tcp-transport-security',
            'ballerina-to-openapi',
            'client-generation',
            'directory-listener',
            'file', // Absolute path varies
            'filepath', // Depends on OS
            'time', // Due to a current timestamp
            'locks', // Output is inconsistent between runs
            'crypto', // Output with line breaks cannot be compared
            'jwt-issue-validate', // Output depends on time
            'http-service-with-basic-auth-file-user-store', // Log output depends on time
            'http-service-with-basic-auth-ldap-user-store', // Log output depends on time
            'http-service-with-jwt-auth', // Log output depends on time
            'http-service-with-oauth2', // Log output depends on time
            'send-email',
            'receive-email-using-client',
            'receive-email-using-listener',
            'task-service-timer',       // Services needs to be stopped during build
            'task-service-appointment',
            'error-handling-in-single-place',
            'file-io',
            'uuid'  // Output varies
    ]

    doFirst {
        copy {
            into "$distPath/lib"
            from configurations.externalTestJars
        }

        def src = "${project.rootDir}/examples/"
        def dis = "${distPath}"
        copy {
            from(src)
            into dis
        }
        def inputFile = new File("${distPath}/index.json")
        def categories = new JsonSlurper().parseText(inputFile.text)
        categories.each { category ->
            def examples = category.samples
            examples.each { example ->
                def folder = new File("${distPath}/${example.url}")
                if (folder.exists()) {
                    bbeList.push("$example.url")
                }
            }
        }

        buildIgnoreList.each { String elements ->
            bbeList.remove("$elements")
        }
    }

    ext.prepareProject = { bbe ->
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            //TODO: Need to verify with windows
            exec {
                workingDir "${distPath}/${bbe}"
                commandLine 'cmd', '/c', "${distPath}/bin/bal.bat init test"
            }

        } else {
            exec {
                workingDir "${distPath}/${bbe}"
                commandLine 'sh', '-c', "${distPath}/bin/bal init test"
            }
        }

        if (bbe.startsWith('mysql')) {
            def tomlFile = new File("${distPath}/${bbe}/Ballerina.toml")
            tomlFile.append("\n\n[[platform.java11.dependency]]")
            tomlFile.append("\npath = \"$distPath/lib/mysql-connector-java-8.0.21.jar\"\n")
        }
    }

    ext.buildBBE = { bbe ->
        def exitVal
        def additionalBuildParams = ""
        println "Building example ${bbe}"
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            //TODO: Need to verify with windows
            exitVal = exec {
                ignoreExitValue true
                workingDir "${distPath}/${bbe}"
                commandLine 'cmd', '/c', "${distPath}/bin/bal.bat", 'build', '--experimental', "${additionalBuildParams}"
            }
        } else {
            exitVal = exec {
                ignoreExitValue true
                workingDir "${distPath}/${bbe}"
                commandLine 'sh', '-c', "${distPath}/bin/bal build --experimental ${additionalBuildParams}"
            }
        }
        if (exitVal.getExitValue() == 1) {
            return true
        }
        return false
    }

    ext.outputVerification = { bbe ->
        def directoryPath = "${distPath}/${bbe}"
        File fileReference
        def curlCommands = []
        def ports = []
        def fileOut = []
        def balName = bbe.replace('-', '_') + ".bal"
        FileTree tree = fileTree(directoryPath)
        def curlCommandsFilePath = "${directoryPath}/curlcommandout.txt"
        def portFilePath = "${directoryPath}/ports.txt"
        def outputFilePath = "${directoryPath}/output.txt"
        def additionalBuildParams = ""
        tree.each { content ->
            if (content.name.contains("client.out")) {
                fileReference = file(content)
                fileReference.readLines().each { lines ->
                    fileOut.add(lines.trim())
                    if (lines.startsWith("curl")) {
                        lines = lines.trim() + " >> output.txt"
                        curlCommands.add(lines)
                        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                            curlCommands.add("echo. >> output.txt")
                        } else {
                            curlCommands.add("echo >> output.txt")
                        }
                    }
                }
            } else if (content.name.contains("server.out") || content.name.contains("service.out")) {
                fileReference = file(content)
                String portPrefix = "[ballerina/http] started HTTP/WS listener 0.0.0.0:"
                fileReference.readLines().each { lines ->
                    if (lines.contains(portPrefix)) {
                        lines = (lines - portPrefix).trim()
                        ports.add(lines)
                    }
                }
            }
        }
        def failFlag = false
        if (!ports.isEmpty() && !curlCommands.isEmpty()) {
            fileReference = new File(portFilePath)
            ports.each {
                fileReference << "${it}\n"
            }
            fileReference = new File(curlCommandsFilePath)
            curlCommands.each {
                fileReference << "${it}\n"
            }
            println "Verify output ${bbe}"
            def scriptPath = "${project.rootDir}/ballerina/lib"
            def exitVal
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                exitVal = exec {
                    def windowsPath = scriptPath.replace('/', '\\')
                    workingDir "$windowsPath"
                    commandLine "$windowsPath\\run.bat", "${directoryPath}", "${distPath}/bin/bal.bat", "${balName}", "${curlCommandsFilePath}", "${portFilePath}", "${additionalBuildParams}"
                    ignoreExitValue true
                }
            } else {
                exitVal = exec {
                    workingDir "$scriptPath"
                    commandLine "bash", "run.sh", "${directoryPath}", "${distPath}/bin/./bal", "${balName}", "${curlCommandsFilePath}", "${portFilePath}", "${additionalBuildParams}"
                    ignoreExitValue true
                }
            }
            // Return immediately if command failed
            if (exitVal.getExitValue() == 1) {
                println "Failed due to build failure."
                return true
            }
            File bbeOutput = new File(outputFilePath)
            if (bbeOutput.exists()) {
                bbeOutput.readLines().each {
                    if (!fileOut.contains(it.trim()) && it) {
                        println "Failed due to output did not match. Line ${it}"
                        failFlag = true
                    }
                }
            }
            delete portFilePath
            delete curlCommandsFilePath
            delete outputFilePath
        } else if (ports.isEmpty() && curlCommands.isEmpty()) {
            balName = bbe.replace('-', '_')
            def str = ""
            fileOut = []
            def bbeOutput = []
            def cmdOutAry = []
            def errOut = new ByteArrayOutputStream()
            new ByteArrayOutputStream().withStream { os ->
                println "Output Verification ${bbe}"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    exec {
                        workingDir "${directoryPath}"
                        commandLine 'cmd', '/c', "${distPath}/bin/bal.bat", 'run', '--experimental', "${balName}.bal ", ${additionalBuildParams}
                        ignoreExitValue true
                        standardOutput = os
                        errorOutput = errOut
                    }
                } else {
                    exec {
                        workingDir "${directoryPath}"
                        commandLine 'sh', '-c', "${distPath}/bin/bal run --experimental ${balName}.bal ${additionalBuildParams}"
                        ignoreExitValue true
                        standardOutput = os
                        errorOutput = errOut
                    }
                }
                cmdOutAry.add(os.toString())
                cmdOutAry.add(errOut.toString())
            }

            File file = file("${directoryPath}/${balName}.out")
            file.readLines().each {
                str = it.trim()
                if (str?.trim()) {
                    if (str[0] != '#') {
                        fileOut.add(str)
                    }
                }
            }

            def lines = "${cmdOutAry[0]}".split('\n')
            lines = lines + "${cmdOutAry[1]}".split('\n')
            lines.each {
                str = it.trim()
                if (str != "Compiling source" && str != "${balName}.bal" && str != "Running executable" && str != ""
                        && str != "Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8") {
                    bbeOutput.add(str)
                }
            }

            for (int i = 0; i < bbeOutput.size(); i++) {
                def index = fileOut.findIndexOf { it == bbeOutput[i] }
                if (index == -1) {
                    println "Failed due to output did not match. Line ${i}: ${bbeOutput[i]}"
                    failFlag = true
                }
            }
        }
        return failFlag
    }

    doLast {
        def failedBuildExamples = []
        def failOutputVerificationExamples = []
        bbeList.each { String bbe ->
            if (!outputVerificationIgnoreList.contains(bbe)) {
                boolean outputVerificationFailFlag = outputVerification(bbe)
                if (outputVerificationFailFlag) {
                    failOutputVerificationExamples.add(bbe)
                }
            }
            File tomlFile = new File("${distPath}/${bbe}/Ballerina.toml")
            if (!tomlFile.exists()) {
                prepareProject(bbe)
            }
            boolean buildFailFlag = buildBBE(bbe)
            if (buildFailFlag) {
                failedBuildExamples.add(bbe)
            }
            delete tomlFile
        }

        boolean buildFailure = false
        if (!failedBuildExamples.isEmpty()) {
            println "\n\tThe following BBEs failed while building:\n"
            failedBuildExamples.each {
                println "\t ${it}"
            }
            sleep(10 * 1000)
            buildFailure = true
        }

        if (!failOutputVerificationExamples.isEmpty()) {
            println "\n\tThe following BBEs failed while verifying the output:\n"
            failOutputVerificationExamples.each {
                println "\t ${it}"
            }
            sleep(10 * 1000)
            buildFailure = true
        }
        if (buildFailure) {
            sleep(10 * 1000)
            throw new GradleException('There are test failures')
        }
    }
}

task testStdlibs() {
    def distPath = "${project.rootDir}/ballerina/build/target/extracted-distributions/ballerina-${version}"
    def stdlibTestsList = []

    PatternSet patternSet = new PatternSet()
    patternSet.exclude("**/.ballerina/**")
    patternSet.exclude("**/Ballerina.toml")
    patternSet.exclude("**/Ballerina.lock")
    patternSet.exclude("**/ballerina-internal.log")
    inputs.files(files("${distPath}/stdlib-integration-tests").asFileTree.matching(patternSet))
    def ignoreList = ["websub", "websub-advance", "websub-generic"]

    doFirst {
        def src = "${project.rootDir}/stdlib-integration-tests/"
        def dis = "${distPath}"
        copy {
            from(src)
            into dis
        }
        def inputFile = new File("${distPath}/index.json")
        def stdlibTests = new JsonSlurper().parseText(inputFile.text)
        stdlibTests.each { stdlibTest ->
            def folder = new File("${distPath}/${stdlibTest.path}")
            if (folder.exists()) {
                stdlibTestsList.push("$stdlibTest.path")
            }
        }
    }

    ext.buildStandardLibs = { stdlibTest ->
        def exitVal
        def additionalBuildParams = ""

        if (stdlibTest == "config") {
            additionalBuildParams = "--user.name=ballerina-user"
        }

        if (stdlibTest == "websub-generic" || stdlibTest == "websub-advance") {
            additionalBuildParams = "--test.hub.url=https://localhost:23191/websub/hub"
        }

        println "Testing standard library ${stdlibTest}"
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            //TODO: Need to verify with windows
            exec {
                workingDir "${distPath}/${stdlibTest}"
                commandLine 'cmd', '/c', "${distPath}/bin/bal/ballerina.bat init test"
            }
            exitVal = exec {
                ignoreExitValue true
                workingDir "${distPath}/${stdlibTest}"
                commandLine 'cmd', '/c', "${distPath}/bin/bal.bat build -c --experimental ${additionalBuildParams}"
            }
        } else {
            exec {
                workingDir "${distPath}/${stdlibTest}"
                commandLine 'sh', '-c', "${distPath}/bin/bal init test"
            }
            exitVal = exec {
                ignoreExitValue true
                workingDir "${distPath}/${stdlibTest}"
                commandLine 'sh', '-c', "${distPath}/bin/bal build -c --experimental ${additionalBuildParams}"
            }
        }
        if (exitVal.getExitValue() == 1) {
            return true
        }
        return false
    }

    doLast {
        ignoreList.each { String elements ->
            stdlibTestsList.remove("$elements")
        }

        def failedStdLibs = []
        stdlibTestsList.each { String stdlibTest ->
            boolean stdLibTestFailFlag = buildStandardLibs(stdlibTest)
            if (stdLibTestFailFlag) {
                failedStdLibs.add(stdlibTest);
            }
        }

        if (!failedStdLibs.isEmpty()) {
            sleep(10 * 1000)
            println "\n\tThe following Standard Library Tests Failed:\n"
            failedStdLibs.each {
                println "\t ${it}"
            }
            throw new GradleException('There are test failures')
        }

    }
}

task testDevToolsIntegration() {
    def distPath = "${project.rootDir}/ballerina/build/target/extracted-distributions/ballerina-${version}"
    def devtoolsProjectList = []

    PatternSet patternSet = new PatternSet()
    patternSet.exclude("**/.ballerina/**")
    patternSet.exclude("**/Ballerina.toml")
    patternSet.exclude("**/Ballerina.lock")
    patternSet.exclude("**/ballerina-internal.log")

    inputs.files(files("${distPath}/devtools-integration-tests").asFileTree.matching(patternSet))

    doFirst {
        // Copy projects to distPath
        def devToolsProjectSrc = "${project.rootDir}/devtools-integration-tests/"
        copy {
            from(devToolsProjectSrc)
            into distPath
        }

        // Read the projects from the index.json
        def inputFile = new File("${distPath}/index.json")
        def devtoolsProjects = new JsonSlurper().parseText(inputFile.text)

        // For each project in the devtools integration tests folder, we add it to the project list
        devtoolsProjects.each { devtoolsProject ->
            def folder = new File("${distPath}/${devtoolsProject.path}")
            if (folder.exists()) {
                devtoolsProjectList.push("$devtoolsProject.path")
            }
        }
    }

    doLast {
        // For each devtools project in the list
        devtoolsProjectList.each { String devtoolsProject ->
            // Read the modules from the index.json
            def inputFile = new File("${distPath}/index.json")
            def projectModules = new JsonSlurper().parseText(inputFile.text)

            // For each module we execute the `test -c ${projectModule} command
            projectModules.each { projectModuleVal ->
                def projectModule = projectModuleVal.path
                def additionalBuildParams = ""

                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    exec {
                        workingDir "${buildDir}/${devtoolsProject}"
                        commandLine 'cmd', '/c', "${distPath}/bin/bal.bat init test"
                    }
                    exec {
                        workingDir "${buildDir}/${devtoolsProject}"
                        commandLine 'cmd', '/c',
                                "${distPath}/bin/bal.bat test ${additionalBuildParams}"
                    }
                } else {
                    exec {
                        workingDir "${distPath}/${devtoolsProject}"
                        commandLine 'sh', '-c',
                                "${distPath}/bin/bal init test"
                    }
                    exec {
                        workingDir "${distPath}/${devtoolsProject}"
                        commandLine 'sh', '-c',
                                "${distPath}/bin/bal test ${additionalBuildParams}"
                    }
                }
            }

        }
    }
}

task startLdapServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=openldap-server"
                standardOutput = stdOut
            }
            if (!stdOut.toString().contains("openldap-server")) {
                println "Starting LDAP server."
                copy {
                    from file("$project.rootDir/stdlib-integration-tests/auth/tests/resources/openldap")
                    into file("/tmp")
                }
                exec {
                    commandLine 'sh', '-c', "docker run --rm -d -p 389:389 --name openldap-server --env LDAP_ORGANISATION=\"AVIX\" --env LDAP_DOMAIN=\"avix.lk\" --env LDAP_ADMIN_PASSWORD=\"avix123\" --env LDAP_BASE_DN=\"dc=avix,dc=lk\" --volume /tmp/bootstrap.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/bootstrap.ldif osixia/openldap:1.3.0 --copy-service"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                println "Waiting 15s until the LDAP server get initiated."
                sleep(15 * 1000)
            } else {
                println "LDAP server is already started."
            }
        }
    }
}

task stopLdapServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=openldap-server"
                standardOutput = stdOut
            }
            if (stdOut.toString().contains("openldap-server")) {
                println "Stopping LDAP server."
                exec {
                    commandLine 'sh', '-c', "docker stop openldap-server"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                println "Waiting 5s until the LDAP server get stopped."
                sleep(5 * 1000)
            } else {
                println "LDAP server is not started."
            }
        }
    }
}

/* Unpack Dependencies */
unpackJballerinaTools.dependsOn unpackBallerinaJre
unpackDevTools.dependsOn unpackJballerinaTools
unpackStdLibs.dependsOn unpackDevTools
unpackC2cLibs.dependsOn unpackStdLibs
unpackC2cExamples.dependsOn unpackC2cLibs
unpackC2cTooling.dependsOn unpackC2cExamples
downloadBalCommand.dependsOn unpackObservabilityExtensions
downloadBalCommand.dependsOn unpackC2cTooling

/* Extract JRE */
extractJreForLinux.dependsOn unpackBalCommand
extractJreForMac.dependsOn extractJreForLinux
extractJreForWindows.dependsOn extractJreForMac

copyOtherRepos.dependsOn extractJreForWindows
copyDevToolsCoverageReport.dependsOn copyOtherRepos
copyDevToolsDocUi.dependsOn copyDevToolsCoverageReport
buildDistRepo.dependsOn copyDevToolsDocUi
filterApiDocs.dependsOn buildDistRepo
combineDocs.dependsOn filterApiDocs

/* Package Distributions */
packageDist.dependsOn buildDistRepo
packageDist.dependsOn combineDocs
packageDistZip.dependsOn packageDist
packageDistLinux.dependsOn packageDistZip
packageDistMac.dependsOn packageDistLinux
packageDistWindows.dependsOn packageDistMac
unzipDistForTests.dependsOn packageDistZip
unpackStdLibs.dependsOn unpackBallerinaJre
unpackStdLibs.dependsOn unpackJballerinaTools
unpackBalCommand.dependsOn downloadBalCommand

testExamples.dependsOn unzipDistForTests

testStdlibs.dependsOn startLdapServer
testStdlibs.dependsOn unzipDistForTests
testStdlibs.finalizedBy stopLdapServer
testDevToolsIntegration.dependsOn unzipDistForTests

/* Delete Temporary Files */
deleteTemporaryFiles.dependsOn packageDistWindows
deleteTemporaryFiles.dependsOn testExamples
deleteTemporaryFiles.dependsOn testStdlibs
deleteTemporaryFiles.dependsOn testDevToolsIntegration
test.dependsOn deleteTemporaryFiles
test.dependsOn testExamples
test.dependsOn testStdlibs
